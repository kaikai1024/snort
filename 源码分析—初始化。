关于迅雷协议
（）
snort.c：
        a）初始化：完成检测数据包之前的所有工作
        b）数据包处理：完成数据包从嗅探到报日志输出等工作
SnortMain()：整个系统的主体
a）初始化：
        前期准备工作
        打开数据包截获接口
        插件初始化
        规则链表初始化
        规则快速匹配引擎初始化
b）数据包处理
        数据包截获
        数据包解码
        处理嗅探模式和日志记录模式
        数据包预处理
        数据包检测
        日志及报警的输出
全局变量Packet数据结构（decode.h）：控制着整个系统正常工作的关键信息。里面包含Snort支持的相关协议的对应结构
        指示原始数据包截获信息的字段，包含*pkth 和*pkt指针字段
        用于存放当前数据包进行协议解析后所得信息的字段，都对应了相应的协议，只要了解对应的协议的包的结构，了解就很容易
        标识字段
全局变量pv：存储了系统运行时需要的绝大部分标志信息。
                存储了系统配置信息和命令行参数解析后的结果信息，从而对系统的众多控制标识符的设置起着很重要的作用
        定义在snort.h中
系统初始化：
检测引擎初始化：fpInitDetectionEngine()配置检测引擎的一些默认参数，即初始化FPDETECT（fpcreate.h）
        对fpDetect赋初值
        调用fpSetDetectionOption函数，将值传递给定义于fpDetect.c中的fpDetect
命令行初始化：

命令行解析
ParseCmdLine函数中while/switch/case，其利用getopt()循环分析读取命令行参数，交于ch进行匹配。
打开数据截获接口：
libpcap库函数：
	pcap_lookupdev( )：查找第一个可以使用的网络适配器
	pcap_open_live( )：获取适配器的描述信息
	pcap_open_live( )：打开网卡
	pcap_open_offline( )：从文件读取数据包
	pcap_snapshot( )：获取数据链路层的类型
	pcap_compile( )，pcap_setfilter( )：设置过滤规则
	pcap_loop( )：捕获数据包
OpenPcap()函数调用以上所有函数，完成包截获引擎在截获之前的所有工作。
	1.Snort数据包的获得有两种来源：从网络或文件中获取。
	2.snaplen = pcap_snapshot(pd);后面，主函数会调用SetPktProcessor函数来根据snaplen的值判断该调用何种对应的拆包函数。
插件初始化：日志输出插件，预处理插件，检测插件。链表来处理
注册——初始化——调用
输出插件注册初始化：（snort运行到InitOutputPlugins()函数时仅仅是注册，当后面进行规则解析时才能“顺便”初始化）
注册：OutputKeyWordList插件链表的节点，封装了关键字节点。OutputKeywordNode
注册函数setup又通过调用RegisterOutputPlugin来注册实现，RegisterOutputPlugin负责了链表的搭建，其算法思想是判断链表是否位空
		，为空则新建链表和头节点，否则在链表尾添加一个新节点，
初始化函数：
	读取相关插件的配置参数
	将插件名和实际处理函数建立到一个链表中，以供系统后面调用。输出插件有两个链表LOG和ALERT
规则字符串查找分析：主函数通过调用规则拆分函数ParseRule来读取snort.conf相关配置语句，实现输出插件初始化相关工作。
规则配置及字符串拆分：ParseOutputPlugin函数是完成输出插件初始化的主要函数。mSplit函数：用于字符串的拆分，
			GetOutputPlugin函数用于从输出插件注册链表中获取与当前插件名对应的节点。
初始化函数：Syslog插件
预处理插件初始化：数据包在进入检测引擎之前，对其进行前期的一些处理。（过程和输出插件差不多）
	分片的数据包需要重组
	HTTP请求的URL字符串需要统一格式化
	需要识别扫描探测等行为
PreprocessKeywordlist：封装了关键字节点PreprocessNode
注册：主函数调用InitPreprocessors （plugbase.c）函数进行预处理插件的初始化。
	函数每次调用setup××函数来实现每一个对应的预处理插件的初始化。注册的基本思想是将关键字名相应的处理函数进行绑定
	再构建链表。每一个setup××函数都是通过调用了RegisterPreprocessor函数来实现注册的，其两个参数分别表示插件名和
	对应的处理函数。
初始化：1.主函数用ParseRuleFile，从snort.conf配置文件中一行一行的读取配置参数，交于ParseRule函数进一步拆分
	2.ParseRule函数分析每一行的配置，判断配置的类型，若是预处理插件的配置，则调用ParsePreprocessor
	进一步分析预处理插件的配置
	3.ParsePreprocessor（parser.c）函数将取出配置文件中使用的预处理插件的插件名字关键字，然后遍历注册时建立的链表
各种预处理插件的过程都很相似：
	1.拆解分析配置函数,填充相应的数据结构
	2.将该预处理器插件的实际功能函数，填充至实际执行的预处理插件链表
	3.将退出清理函数填充至实际执行的预处理插件链表
	4.将其重置函数填充至实际执行的预处理插件链表
流跟踪模块主要用于建立和维护一个连接状态表（协议、来源地址、目的地址、来源端口、目的端口）对应的数据结构SPPFLOW_CONFIG（spp_flow.c）
所有的量表建立好以后，待诱截获到数据包后对数据包进行逐一的调用，对数据包进行预处理。
调用：函数Preprocess
规则选项关键字插件初始化（检测插件）：
InitPlugIns函数注册（与前面相似）setup××——RegisterPlugin
五，检测规则初始化引擎
三维链表来组织规则。
	首层链表定义了五个RuleListNode结构的节点RuleListNode：alter,log,pass,active,dynamic。每个动作的规则再按协议来划分，
而且如果数据包于规则相匹配需要输出的话还要调用对应的输出插件。即位第二层数据结构，ListHead。规则头除了包含动作、协议外，
还有在此协议下的地址、端口、数据流方向等，于是加上一些控制标志，即为第三层链表节点RuleTreeNode（RTN）。RTN用Right来指向下一个节点，
down指向第四层的数据节点：规则节点选项OptTreeNode（OTN）。
规则初始化流程：CreateDefaultRules函数完成第一层链表的搭建。ParseRuleFile读取snort.conf等配置文件，将配置文件一行一行送往
ParseRule解析，交回文件名，两个函数反复回调，完成规则的初始化过程。
CreateDefaultRules搭建最上层链表通过五次调用CreateRuleType函数实现。CreateRuleType函数负责链表的具体实现。
ParseRule函数打开参数char *file指向的文件，然后一行一行的读取文件，再交由后续函数处理。
ParseRule :
	函数负责将上层函数ParseRuleFile传递过来的一行字符串进行进一步分解，提出指令类型，再进一步判断，调用相应的处理函数。
获取规则类型RuleType——属于检测规则类型？——处理规则头ProcessHeadNode——ProcessRuleOption
				——调用对应的解析模块——ParsePreprocesstor,ParseOutPutPlugins,ParseConfig,ParseRuleTypeDeclaration
函数ParseRule在进行规则头的IP地址处理的时候，调用了ProcessIP函数来向RTN填充源/目的ip地址及掩码的信息。ProcessIP函数
将规则头中IP地址信息的集中相关字符串分别一一进行处理。
函数ParsePort用于拆分规则头中的端口子串，将分析后的结果填充RTN结构的相应成员变量。
mSplit函数将指定的字符串，使用指定的分隔符标识进行分割后，把结果存储在二维字符串数组中返回。
ProcessHeadNode函数的功能是用来搭建第三层RTN的链表，首先它需要判断第二次节点对应的相应协议的RTN节点是否为空，
若为空则表示一个新节点为其分配空间，并填充相应成员变量的值，若非空则按照目的端口的升序来将节点插入到已存的链表中。
在构建RTN节点的时候调用了一个重要的功能函数SetupRTNFuncList，它的作用是添加匹配规则头的函数列表。
一个规则头包含了地址端口数据流等要素在进行数据包检测的时候需要对被检测数据包的对应的要素一一匹配，
这些都是由RTN的检测函数来完成的，如CheckBidrectional等，而SetRTNFuncList函数的作用就是先把他们
添加至对应RTN的节点的函数列表中，以待检测引擎匹配的时候来逐一调用。最终实现函数列表添加的函数是AddRuleFuncToList。
ParseRuleOption函数用于搭建第四层链表OTN，也就是规则选项的相关内容。系统在ParseRule函数中调用。函数逐个提取关键字
链表进行分析，然后调用对应的处理函数进行拆解，OTN节点的节点值一一被填充对应的值。搭建完成。
ParseMessage函数的功能是将规则中的消息字符拷贝到当前规则链表选项节点结构中的对应字段中。其他的提取parse×××函数与此相似。
逐层调用后，规则的初始化就完成了，Snort的1.X版本中就开始检测了。每一个数据包经过嗅探引擎、拆包引擎以预处理后就开始遍历
这个链表。2.0版本以后，引入了快速匹配引擎设计。
设计规则快速匹配引擎的目的在于通过莫种手段，对规则链表进行二次分类，以提高规则的检测匹配效率。系统采用的基本思想是
通过规则中目的端口和源端口值来划分类别。
	1.如果源端口位特定值，目的端口位ANY，则该规则加入到远端口值对应的子集合中。如果目的端口也为特定值，则同时
	将该规则加入到目的端口对应的子集合中去。
	2.如果目的端口为特定值，而源端口为任意值ANY，则将该规则加入到目的端口对应的子集合中去，如果远端口也位特定值，
	则同时将该规则加入到源端口对应的子集合中。
	3.如果目的端口和源端口位任意值ANY，则将规则加入到通用子集合中
	4.对于规则中端口值求反操作或者指定值范围的情况，等同于端口值ANY情况加以处理。
如果规则中不含端口值，如ICMP或IP协议类型的规则，如下：
	1.对于ICMP协议规则，如果规则中指定了ICMP类型值，则目的端口值指定位ICMP类型值，否则，为ANY
	2.对于IP协议类型，如果规则中指定了IP高层类型值，则目的端口指定为IP高层协议类型值，否则为ANY
	3.两者谷子额划分时，源端口都指为ANY
数据结构：PORT_RULE_MAP；顶层数据结构 ;PORT_GROUP:负责存放根据特定端口值所划分的规则子集合；RULE_NODE:规则节点链表；OTNX。
每类协议（tcp/udp/icmp/ip）都对应了一个PORT_RULE_MAP结构，系统针对每个协议，定义了一个全局变量（fpCreate.c），也就是说
构建规则快速匹配引擎，主要是针对这四个全局变量进行值的填充。
PORT_GROUP结构中主要包含规则节点（三种规则节点RULE_NODE：包含content，包含uricontent和没有内容匹配选项的规则）及各计数器。
OTNX结构类型中包含分别指向特定规则所对应的链表头节点和选项节点的指针值，根据划分标准而得到的各个规则子集中实际包含的都是
OTNX结构类型的指针，所指向的是初始规则链表结构中对应的结点，如此，将快速匹配规则引擎中新建的数据结构和原始的规则链表
数据结构联起来，其中OTNX就是其中的桥梁。
fpCreateFastPacketDetection函数是整个快速匹引擎构建的框架函数（fpCreate.c）。其判断了规则是否包含content后，就调用prmAddRuleXX函数。
主要包含prmAddRule，prmAddRuleUri，prmAddRuleNC，他们实际执行规则集合的划分，同时，判断当前规则链选项节点是否包含内容
匹配类型及类型，将当前规则节点加入到PORT_GROUP结构中不同类型的规则节链中。
在prmAddRuleXX进行了相应的端口判断后，prmxAddPortRuleXX具执行在指定的PORT_GROUP结构中的对应规则节点链表中加入当前的OTNX结构变量。
	1.对应于特定源端口值的PORT_GROUP结构的规则链表：PORT_GROUP *prmSrcPort[MAX_PORTS]
	2.对应于特定目的端口值的PORT_GROUP结构的规则链表：PORT_GROUP *prmDstPort[MAX_PORTS
	3.通用规则节点链表：PORT_GROUP *prmGeneric
prmCompileGroups和BuildMultiPatternGroups：
为了提高检测时的效率，规则链表已经被端口和协议来重新划分成为四种协议，每种协议又有三种类型。但是对于未来的检测任务来说，
每个等待检测数据包都有特定的源/目的端口值，也就是说，可能这个数据包既符合了某条目的端口的集合中的规则，又符合通用集合中
的某条规则，所以有必要将通用规则链接到特定端口值的这两个链表中的每一个子链表中去。prmCompileGroups来完成。
为了适应多模式搜索算法的需要，fpCreateFastPacketDetection调用BuildMultiPatternGroups函数来在每个PORT_GROUP结构中构建
多模式搜索引擎所需的数据结构。
这样遍历完原始规则链表后，就构建了一个新的规则链表数据结构，将规则按照端口结合重新分类，为下一步多模匹配引擎检测做好准备。
	1.最顶层：按照协议不同，四个最顶层的PORT_RULE_MAP类型的全局变量
	2.第二层：端口的目的/来源端口的大小将规则添加至顶层结构中的某个PORT_GROUP中去。
	3.第三层：将新的数据结构与原始的数据结构关联，主要通过（voi*）PORT_RULE_MAP->PORT_GROUP->RULE_NODE->RULE_PRT，
	在实际运行中指向了OTNX结构，OTNX中又指向了RTN和OTN。

	

