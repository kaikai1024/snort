InterfaceThread：
  系统在所有初始化工作完成以后，就进入了数据包处理阶段，完成这一阶段的任务是通过主函数在末尾调用InterfaceThread函数实现。
数据包的处理主要包括截获、拆包、预处理插件处理、检测引擎匹配、输出插件的日志输出。
数据包处理是调用LibPcap的库函数pcap_loop来实现，截取后的数据包，都是由回调函数ProcessPacket来处理。
ProcessPacket：
  1.完成了数据包的初步处理，如累加计数
  2.数据包解码
  3.如果需要输出到屏幕，则调用相应的Print输出函数
  4.如果是日志记录模式，则调用相应输出插件
  5.如果是IDS模式，则调用Preprocess进行检测
数据包终端输出模块一共支持IP，ARP，Eapol，Wifi四种协议。
IP包输出流程：PrintIPPkt首先根据pv.show2hdr_flag标志来决定是否需要调用Print2ndHeader输出第二层的相关信息，然后再调用
              PrintIPHeader输出IP包头，最后判断高层协议是TCP/UDP/ICMP，调用相应的输出函数处理。
Print2ndHeader：输出链路层信息。首先利用datalink（OpenPcap函数中赋值）的值判断数据链路层协议（Ethernet ，IEEE802_11， 
                Token Ring ，Linux cooked，sockets），调用相应的输出函数处理。
日志记录模式：输出链表共有两条：LogList（日志）AlertLis（报警）。
              CallLogPlugins：主要遍历LogList的所有注册的功能函数，实现日志的输出。
Preprocess函数处理整个数据检测及处理流程。主要处理“预处理——检测——输出”。      
数据包解码引擎：
  1.系统在OpenPcap函数中，利用snaplen = pcap_snapshot(pd)获取了数据链路层的值，然后在主函数中调用SetPktProcessor进行
  解码函数的关联处理。SetPktProcessor函数的主要处理流程是利用switch case语句，判断snaplen的值，然后将函数指针指向对应
  的实际解函数。
  2.数据包解码引擎解后的结果全部放在Packet *p中。
在grinder指向了实际的解码函数以后，ProcessPacket函数就调用（*grinder）(&p,pkthdr,pkt)进入解码引擎。（decode.c）
以太网拆包（拆解以太网——拆解IP包——拆解TCP/UDP/ICMP）：
DecodeEthPkt：主要功能拆解以太网封包，以太网包头只有十四个字节：6字节目的地址值，6字节源地址，2字节上层协议地址值。
DecodeIP：拆解IP包，与上相似。IPHdr：IP封包格式。如果是一个分片包，则在进行了标志位计算，设置，计数器的设置后，根据
          p->frag_flag分片标志位，不再进行上层协议的拆包。
          Snort专门有一个用于分片重组的预处理插件frag2，分片包进入frag2进行重组完成后在其RebuildFrag函数中会调用
          ProcessPacket函数重新进入数据包处理模块，再次进入解码引擎。
DecodeTCP：TCPHdr：TCP包头结构。
预处理插件的具体实现：
  Stream4：状态维护和会话重组
  Frag2：分片重组和攻击检测
  Postscan：端口扫描
  BO：bo后门
  Arpspoof：反ARP欺骗
Frag2：将所有分重组构造成一个包含完整信息的包，再将这个包传给检测引擎。还可以检测基于分片的默写DoS攻击，如teardrop。
      其 使用Frag2Data结构来存储当前模块的参数配置情况，此结构已经在frag2的初始化函数中设置了相应的值。
Frag2数据结构是二维的：第一维用来存储数据包的特征，如地址端口协议ID等，第二维用来存储该数据包对应的所有分片。是一个
                      两级的二叉树：主二叉树和二级二叉树。主二叉树存数据包信息，每个节点都指向一个FragTracker结构。
                      
主二叉树的每一个节点对应结构ubi_trNode，节点指向一个FragTracker结构，主二叉树通过其中的fraglist和fraglistPtr字段
来管理二级二叉树。二级二叉树的每个节点又都指向了一个Frag2Tracker结构。
Frag2对于新来的分片数据包，判断它对应的特征是否匹配主二叉树的节点，匹配则加入其二级二叉树，否则则为一个新的分片，
就为它分配一个对应的主二叉树节点，再把这个分片的信息加入这个新节点的第一个分片。而数据包的重组则是判断二级二叉树
是否已完整的收集了该数据包的所有分片。
frag2的主要功能模块主要通过Frag2Defrag函数实现。
	GetFragTracker：检查该分片包的特征是否已经在主二叉树上存在
	NewFragTracker分配一个新的主二叉树节点
	Insert2Flag：插入分片包至二级二叉树
	FragIsComplete：某一个数据包的所有分片是否已经接收完成
	RebuildFrag：重组数据包
GetFragTraker：通过调用ubi_sptFind函数来实现判断，函数层层调用，具体遍历主二叉树是在函数qFind中实现。                      
NewFragTracker：首先调用Frag2Alloc来为主二叉树分配一个节点空间，然后将当前包的地址、协议、ID等信息赋给Frag2Tracker
                结构的相应变量，接着调用ubi_trInitTree函数初始化ubi_btRoot结构，这里关联了节点比较函数RootPtr->cmp
                = CompFunc；这样节点建立好以后，由InsertFrag把当前分片包的分片信息写入已经分配了的节点对应的
                二级二叉树中。插入节点最重要的是遍历二叉树，TreeFind。
Snort检测ARP欺骗的算法：在Snort.conf中建立一个MAC-IP的对照表，收集所有的ARP请求包和应答包，先判断这些包的合法性，
                        然后把实际的包中的地址信息与对照表中的地址信息作比较，不一致，则发生了ARP欺骗。
    ARPspoofInit
    ARPspoofHostInit
ARPspoofInit：读出MAC-IP表：ParseARPspoofHostArgs将定义的参数读取出来，填充ipmel链表。DetectARPattacks检测。
数据包检测引擎：
Detect函数是检测引擎的入口，在函数preprocess中通过调用Detect函数进入实际的数据包检测，Detect调用fpEvalPacket函数
进入多模式匹配引擎。
fpEvalPacket函数是检测引擎的接口，主要是判断待检测的数据包是TCP、UDP、ICMP还是IP包，然后调用相应的fpEvalHeaderXXX
检测函数。共有四个检测函数，流程相似。
fpEvalHeaderTcp：将该数据包与规则子集合进行匹配。函数首先调用prmFindRuleGroupTcp函数取得适合当前规则的子集合，然后
调用InitMatchInfo函数对初始化模块进行进一步优化，最后调用fpEvalHeaderSW函数进入多模式搜索匹配工作引擎。
prmFindRuleGroupTCP：查找与当前待检测的TCP数据包相匹配的规则子集合，查找算法是根据建立规则快速匹配引擎时的划分依据。
其转向调用prmFindRuleGroup函数在全局变量prmTcpRTNX中查找。prmFindRuleGroup用于查找与此数据包匹配的规则子集合。
InitMatchInfo中重要的变量omd，结构主要用于记录在整个数据包匹配期间涉及到的相关信息。static OTNX_MATCH_DATA omd
fpEvalHeaderSW：引入了多模式搜索匹配工作引擎，另外加强了对TCP流状态的处理。
系统经过前面处理，根据协议、端口查找到了被检测数据包对应的根据端口划分的规则子集合。对于每一类规则子集合（PORT_GROUP）
包含了三类节点：包含content，包含uricontent和没有包含content的规则节点。所以，对一个数据包来讲，需对这三类规则节点逐一匹配。
mpseSearch：进行uri-content 或content模式匹配。
fpEvalOTN：实现对规则链表OTN节点的匹配，判断是否存在与当前数据包匹配的规则，对于这些选项关键字的匹配，主要是依靠这些
关键字的检测插件来实现的。OTN节点匹配后，会调用fpEvalRTN函数进一步进行RTN节点的匹配。
检测事件的输出：从检测引擎中输出，留待输出插件调用。omd。fpAddMatch fpFinalSelectEvent SnortEventqAdd
系统在检测完成后，首先会调用fpAddMatch来将事件添加进适当的匹配队列：Alter、Pass、Log。
FpFinalSelectEvent：遍历omd，输出所有事件队列。
SnortEventqAdd：添加一个报警事件。参数为事件信息和一个otnx变量。事件信息被定义为一个SigInfo结构。SnortEventqAdd函数
主要是把上层函数传递过来的相关信息赋给EventNode类型的变量en，再由sfeventq_add函数负责来添加。
sfeventq_add：事件的组织采用的是双向链表，链表头是全局变量s_eventq。
规则链表头的检测函数：
RTN的检测函数的作用是做地址、端口、方向等的检测配置。
	CheckBidirectional：如果规则中设置了双向地址操作标识，检查IP地址和端口值的匹配情况
	CheckSrcPortNotEq：检测当前规则链表头结构中的源端口是否与数据包中源端口不相等
	CheckDstPortNotEq：检测当前规则链表头结构中的目的端口是否与数据包中目的端口不相等
	CheckSrcPortEqual：检测当前规则链表头结构中的源端口是否与数据包中源端口相等
	CheckDstPortEqual：检测当前规则链表头结构中的目的端口是否与数据包中目的端口相等
	CheckSrcIP：检测来源IP地址
	CheckDstIP：检测目的IP地址
CheckBidirectional：在设置了双向操作标识符的情况下，分别检测源IP地址和端口值的匹配情况。
CheckAddrPort：将规则头中的地址、端口和数据包中的地址、端口进行匹配，成功返回1否则返回0.
端口的检测：需要匹配来源端口、目的端口，同时，如果规则中有不等标志“！”还需检测不等的情况。
	CheckSrcPortNotEq
	CheckDstPortNotEq
	CheckSrcPortEqual
	CheckDstPortEqual
地址的检测：源地址和目的地址的匹配，还需处理设置了取反标识符！的情况。
	CheckSrcIP
	CheckDstIP
规则选项关键字插件的实现：
负载长度的检测：负载长度关键字dsize选项用于定义被捕获包的负载长度或长度范。
void SetupDsizeCheck(void)
void DsizeCheckInit(char *, OptTreeNode *, int);
void ParseDsize(char *, OptTreeNode *);
int CheckDsizeEq(Packet *, struct _OptTreeNode *, OptFpList *);
int CheckDsizeGT(Packet *, struct _OptTreeNode *, OptFpList *);
int CheckDsizeLT(Packet *, struct _OptTreeNode *, OptFpList *);
int CheckDsizeRange(Packet *, struct _OptTreeNode *, OptFpList *);
前两个函数用于插件的注册和初始化，第三个用于解析对应的规则配置参数。后四个分别处理等于、大于、小于或者在某个范围内的四个情况。
ParseDsize：解析dsize关键字的参数并存入对应的OTN结构字段中，然后根据解析结果，在规则选项节点中链入对应的处理函数。
Session关键字：用于从TCP会话中抽取用户数据。可以检查用户在telnet，rlogin，ftp或web sessions中的用户输入。
void SetupSession(void)
void SessionInit(char *, OptTreeNode *, int);
void ParseSession(char *, OptTreeNode *);关键字参数配置的解析
int LogSessionData(Packet *, struct _OptTreeNode *, OptFpList *);调用相应的子例程来记录进程的信息。
void DumpSessionData(FILE *, Packet *, struct _OptTreeNode *);处理进程信息的实际记录工作
FILE *OpenSessionFile(Packet *);打开用来记录进程信息的文件
ICMP选项集合：
snort的攻击特征描述中有四种有ICMP有关的选项，用来检测ICMP包中的不同字段，包括ICMP的类型、代码、ID和序列号，
对应插件的源文件为sp_icmp_type_check.c，sp_icmp_code_check，sp_icmp_id_check.c，sp_icmp_seq_check
ICMP ID用于匹配ICMP回响请求（ICMP_ECHO）中的ID域，
此选项用于检测那些利用ICMP包进行通信的欺骗性程序。格式：icmp_id:参数值。
sp_icmp_id_check.c中共包含了注册、初始化、参数解析和检测四个函数。
代码（icode）选项用于检测ICMP包的代码域的值：一是定义为某个特定含义的值，二是定义为一个非法值。后者对于发现欺骗洪流、DoS攻击有所帮助。
实时响应的选项resp（sp_respond.c）允许Snort自动阻断触发规则的连接，最为强大的基于协议的规则选项体。
使用动态响应修饰符的格式为：resp：修饰符1,修饰符2,……
ParseRespond函数用于配置参数的解析，并设置相应的修饰符。
Respond函数根据当前节点中响应标识的设置情况，进行不同的响应操作。最后实现封包发送的功能是由SendTCPRST和SendICMP_UNREACH完成。
输出检测结果：
报警日志输出流程：函数Preprocess(Packet * p)在检测引擎完成后，调用retval = SnortEventqLog(p)来执行输出插件。
SnortEventLog先调用sfeventq_action函数来判断是否需要进行日志事件的记录，若需要，则是通过其第一个参数——函数LogSnortEvents来实现。
                
